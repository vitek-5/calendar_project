import os
import sys
import subprocess
import secrets
import shutil
import webbrowser

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
VENV_DIR = os.path.join(PROJECT_ROOT, 'venv')
DOTENV_PATH = os.path.join(PROJECT_ROOT, '.env')
REQUIREMENTS_PATH = os.path.join(PROJECT_ROOT, 'requirements.txt')
STATIC_DIR = os.path.join(PROJECT_ROOT, 'calendar_app', 'static')

def check_venv():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç –≤–Ω—É—Ç—Ä–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    return sys.prefix != sys.base_prefix

def create_virtualenv():
    """–°–æ–∑–¥–∞—ë—Ç venv –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç install.py –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ"""
    print("üìÅ –°–æ–∑–¥–∞—ë–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ...")
    try:
        subprocess.check_call([sys.executable, '-m', 'venv', VENV_DIR])
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ venv: {e}")
        sys.exit(1)

    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤ venv
    if os.name == 'nt':
        activate_script = os.path.join(VENV_DIR, 'Scripts', 'activate.bat')
        python_executable = os.path.join(VENV_DIR, 'Scripts', 'python.exe')
    else:
        activate_script = os.path.join(VENV_DIR, 'bin', 'activate')
        python_executable = os.path.join(VENV_DIR, 'bin', 'python')

    cmd = f'"{python_executable}" "{os.path.abspath(sys.argv[0])}"'

    print("\nüîå –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º install.py...")

    if os.name == 'nt':
        os.system(f'call "{activate_script}" && {cmd}')
    else:
        os.system(f'source "{activate_script}" && exec {cmd}')

    sys.exit(0)

def generate_env_file(db_name, db_user, db_password):
    """–°–æ–∑–¥–∞—ë—Ç .env —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    secret_key = secrets.token_urlsafe(50)

    with open(DOTENV_PATH, 'w', encoding='utf-8') as f:
        f.write(f"DJANGO_SECRET_KEY={secret_key}\n")
        f.write("DJANGO_DEBUG=True\n")
        f.write(f"DB_NAME={db_name}\n")
        f.write(f"DB_USER={db_user}\n")
        f.write(f"DB_PASSWORD={db_password}\n")
        f.write("DB_HOST=localhost\n")
        f.write("DB_PORT=5432\n")

    print("üìÑ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.")

def setup_database(db_name, db_user, db_password):
    """–°–æ–∑–¥–∞—ë—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL"""
    try:
        import psycopg2
    except ImportError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å psycopg2 ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –≤–Ω—É—Ç—Ä–∏ venv")
        sys.exit(1)

    print(f"üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö '{db_name}'...")

    conn = None
    try:
        dsn = (
            f"dbname=postgres "
            f"user={db_user} "
            f"password='{db_password}' "
            f"host=localhost"
        )

        conn = psycopg2.connect(dsn)
        conn.autocommit = True
        cur = conn.cursor()

        cur.execute(f"SELECT 1 FROM pg_catalog.pg_database WHERE datname = '{db_name}';")
        exists = cur.fetchone()
        if exists:
            print(f"‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        else:
            cur.execute(f"CREATE DATABASE {db_name};")
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")

        cur.close()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ PostgreSQL: {e}")
        sys.exit(1)
    finally:
        if conn:
            conn.close()

def install_dependencies():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ requirements.txt –≤ venv"""
    pip_path = os.path.join(VENV_DIR, 'Scripts', 'pip') if os.name == 'nt' else os.path.join(VENV_DIR, 'bin', 'pip')
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    try:
        subprocess.check_call([pip_path, 'install', '-r', REQUIREMENTS_PATH])
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        sys.exit(1)

def run_migrations():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Django API –Ω–∞–ø—Ä—è–º—É—é"""
    print("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏...")

    try:
        import django
        from django.core.management import call_command
    except ImportError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Django ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        sys.exit(1)

    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')
    try:
        django.setup()
        print("‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
        call_command('makemigrations', 'calendar_app')
        print("‚öôÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
        call_command('migrate')
        print("‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        sys.exit(1)

def collect_static():
    """–°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã"""
    static_dir = os.path.join(PROJECT_ROOT, 'calendar_app', 'static')
    if not os.path.exists(static_dir):
        os.makedirs(static_dir)
        print(f"üìÅ –ü–∞–ø–∫–∞ {static_dir} —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Å—Ç–∞—Ç–∏–∫–∏.")

    try:
        import django
        from django.core.management import call_command
        django.setup()
        call_command('collectstatic', '--noinput')
        print("‚úÖ –°—Ç–∞—Ç–∏–∫–∞ —Å–æ–±—Ä–∞–Ω–∞.")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏–∫—É: {e}")

def main():
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º Windows —Ç–µ—Ä–º–∏–Ω–∞–ª –Ω–∞ UTF-8
    if os.name == 'nt':
        os.system('chcp 65001 >nul')

    print("üõ†Ô∏è –ú–∞—Å—Ç–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ ¬´–û–Ω–ª–∞–π–Ω-–∫–∞–ª–µ–Ω–¥–∞—Ä—å¬ª\n")

    # –®–∞–≥ 1: –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    db_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–π/—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ")
    db_user = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è PostgreSQL: ")
    db_password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è PostgreSQL: ")

    # –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è .env
    generate_env_file(db_name, db_user, db_password)

    # –®–∞–≥ 3: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    install_dependencies()

    # –®–∞–≥ 4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î
    setup_database(db_name, db_user, db_password)

    # –®–∞–≥ 5: –ú–∏–≥—Ä–∞—Ü–∏–∏
    run_migrations()

    # –®–∞–≥ 6: –°–±–æ—Ä–∫–∞ —Å—Ç–∞—Ç–∏–∫–∏
    collect_static()

    print("\nüéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print("üìå –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä.")

    # –®–∞–≥ 7: –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    while True:
        choice = input("\n–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä Django? (y/n): ").strip().lower()
        if choice in ('y', 'yes', '–¥', '–¥–∞'):
            print("\nüöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ Django...")
            print("üìå –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
            webbrowser.open("http://127.0.0.1:8000")
            try:
                subprocess.check_call([sys.executable, 'manage.py', 'runserver'])
            except KeyboardInterrupt:
                print("\n\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
                print("üìå –ß—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –ø–æ–∑–∂–µ:")
                print("   python manage.py runserver")
            break
        elif choice in ('n', 'no', '–Ω', '–Ω–µ—Ç'):
            print("\nüìå –ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –ø–æ–∑–∂–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:")
            print("   python manage.py runserver")
            print("üåê –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://127.0.0.1:8000")
            break
        else:
            print("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ 'y' –∏–ª–∏ 'n'")

if __name__ == "__main__":
    try:
        if not check_venv():
            create_virtualenv()
        else:
            main()
    except KeyboardInterrupt:
        sys.exit(0)