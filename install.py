import os
import sys
import subprocess
import secrets
import psycopg2

# –ü—É—Ç—å –∫ .env
dotenv_path = '.env'

def generate_env_file(db_name, db_user, db_password):
    """–°–æ–∑–¥–∞—ë—Ç .env —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    secret_key = secrets.token_urlsafe(50)

    with open(dotenv_path, 'w', encoding='utf-8') as f:
        f.write(f"DJANGO_SECRET_KEY={secret_key}\n")
        f.write("DJANGO_DEBUG=True\n")
        f.write(f"DB_NAME={db_name}\n")
        f.write(f"DB_USER={db_user}\n")
        f.write(f"DB_PASSWORD={db_password}\n")
        f.write("DB_HOST=localhost\n")
        f.write("DB_PORT=5432\n")

    print("üìÑ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.")

def setup_database(db_name, db_user, db_password):
    """–°–æ–∑–¥–∞—ë—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL"""
    print(f"üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö '{db_name}'...")

    conn = None
    try:
        dsn = (
            f"dbname=postgres "
            f"user={db_user} "
            f"password='{db_password}' "
            f"host=localhost"
        )

        os.environ['PGCLIENTENCODING'] = 'UTF8'
        conn = psycopg2.connect(dsn)
        conn.autocommit = True
        cur = conn.cursor()

        cur.execute(f"SELECT 1 FROM pg_catalog.pg_database WHERE datname = '{db_name}';")
        exists = cur.fetchone()
        if exists:
            print(f"‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        else:
            cur.execute(f"CREATE DATABASE {db_name};")
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")

        cur.close()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ë–î: {e}")
        sys.exit(1)
    finally:
        if conn:
            conn.close()

def install_dependencies():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ requirements.txt"""
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    subprocess.check_call([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'])

def run_migrations():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Django API –Ω–∞–ø—Ä—è–º—É—é"""
    print("üîÑ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π...")

    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')
    try:
        import django
        from django.core.management import call_command

        # –Ø–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        django.setup()

        # –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π (makemigrations)
        print("‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
        call_command('makemigrations')

        # –®–∞–≥ 2: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π (migrate)
        print("‚öôÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
        call_command('migrate')
        print("‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        sys.exit(1)

def collect_static():
    """–°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã"""
    print("üìé –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏–∫—É...")

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É calendar_app/static, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    static_dir = os.path.join('calendar_app', 'static')
    if not os.path.exists(static_dir):
        os.makedirs(static_dir)
        print(f"üìÅ –ü–∞–ø–∫–∞ {static_dir} —Å–æ–∑–¥–∞–Ω–∞.")

    try:
        import django
        from django.core.management import call_command

        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')
        django.setup()

        # –°–æ–∑–¥–∞—ë–º static_root, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        static_root = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'staticfiles')
        if not os.path.exists(static_root):
            os.makedirs(static_root)
            print(f"üìÅ –ü–∞–ø–∫–∞ {static_root} —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏–∫–∏.")

        call_command('collectstatic', '--noinput')
        print("‚úÖ –°—Ç–∞—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–∞.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ —Å—Ç–∞—Ç–∏–∫–∏: {e}")
        sys.exit(1)
        
def check_tables_in_db(db_name, db_user, db_password):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")

    try:
        dsn = (
            f"dbname={db_name} "
            f"user={db_user} "
            f"password='{db_password}' "
            f"host=localhost"
        )
        conn = psycopg2.connect(dsn)
        cur = conn.cursor()

        cur.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' AND table_type = 'BASE TABLE'
        """)
        tables = cur.fetchall()
        if tables:
            print("‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
            for table in tables:
                print(f" - {table[0]}")
        else:
            print("‚ùå –¢–∞–±–ª–∏—Ü—ã –≤ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")

        cur.close()
        conn.close()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü: {e}")

if __name__ == "__main__":
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º Windows —Ç–µ—Ä–º–∏–Ω–∞–ª –Ω–∞ UTF-8
    if os.name == 'nt':
        os.system('chcp 65001 >nul')

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–∞–∫ —Ä–∞–±–æ—á—É—é
    project_root = os.path.dirname(os.path.abspath(__file__))
    os.chdir(project_root)

    print("üõ†Ô∏è –ú–∞—Å—Ç–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ ¬´–û–Ω–ª–∞–π–Ω-–∫–∞–ª–µ–Ω–¥–∞—Ä—å¬ª\n")

    # –®–∞–≥ 1: –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    db_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ")
    db_user = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è PostgreSQL: ")
    db_password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è PostgreSQL: ")

    # –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è .env
    generate_env_file(db_name, db_user, db_password)

    # –®–∞–≥ 3: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    install_dependencies()

    # –®–∞–≥ 4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î
    setup_database(db_name, db_user, db_password)

    # –®–∞–≥ 5: –ú–∏–≥—Ä–∞—Ü–∏–∏
    run_migrations()

    # –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–∞–±–ª–∏—Ü
    check_tables_in_db(db_name, db_user, db_password)

    # –®–∞–≥ 7: –°–±–æ—Ä–∫–∞ —Å—Ç–∞—Ç–∏–∫–∏
    collect_static()

    print("\nüéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print("üöÄ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä:")
    print("   python manage.py runserver")